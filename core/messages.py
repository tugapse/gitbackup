# A dictionary to hold all log messages
# You can categorize them further if needed (e.g., by module or type)
MESSAGES = {
    # General Messages
    "info_cli_from_arg": "CLI",
    "info_cli_from_config": "config",
    "info_cli_from_config_default": "config/default",

    # Workflow Logic Messages
    "workflow_start_task": "Starting automated task from '{}'",
    "workflow_task_details": "\nTask Details: {}",
    "workflow_git_repo_path": "  Git Repo Path: '{}' (from {})",
    "workflow_branch": "  Branch: '{}' (from {})",
    "workflow_origin": "  Origin: '{}' (from {})",
    "workflow_precommit_command": "  Pre-commit Command: '{}'",
    "workflow_no_precommit_command": "  No pre-commit command specified.",
    "workflow_commit_message": "  Git Commit Message: '{}'",
    "workflow_error_missing_repo_path": "Error for '{}': 'git_repo_path' is missing in config.json and not provided via --folder.",
    "workflow_task_aborted_missing_info": "Task '{}' aborted due to missing essential information.",
    "workflow_repo_not_found_init_attempt": "Git repository not found at '{}'. Attempting to initialize...",
    "workflow_repo_init_failed": "Task '{}' aborted: Git repository initialization failed.",
    "workflow_repo_init_success": "Git repository initialized successfully.",
    "workflow_error_repo_not_valid": "Error for '{}': Defined Git repository path '{}' is not a valid Git repository or does not exist.",
    "workflow_hint_use_initialize": "To initialize it, use the --initialize flag.",
    "workflow_task_aborted_repo_setup": "Task '{}' aborted as Git repository is not set up correctly.",
    "workflow_repo_found": "Git repository found at '{}'.",
    "workflow_checkout_branch_step": "Checking out or creating branch '{}'",
    "workflow_checkout_branch_failed": "Task '{}' aborted: Failed to checkout or create branch '{}'.",
    "workflow_initial_pull": "Performing initial Git Pull",
    "workflow_initial_pull_success": "Initial Git Pull completed successfully.",
    "workflow_initial_pull_failed": "Task '{}' aborted: Initial Git Pull failed.",
    "workflow_executing_command_line": "Executing command_line",
    "workflow_command_execution_success": "Command execution completed successfully.",
    "workflow_command_execution_failed": "Task '{}' aborted: Command execution failed.",
    "workflow_no_command_line": "No command_line to execute.",
    "workflow_checking_for_changes": "Checking for changes in Git Repository",
    "workflow_error_diff_check_failed": "Task '{}' aborted: Failed to check for Git differences.",
    "workflow_changes_detected_add_commit": "Changes detected. Performing Git Add and Commit",
    "workflow_git_add_commit_success": "Git Add and Commit completed successfully.",
    "workflow_git_add_commit_failed": "Task '{}' aborted: Git Add/Commit failed.",
    "workflow_no_changes_skip_commit": "No changes detected. Skipping Git Add and Commit.",
    "workflow_commits_made_push": "Commits made. Performing Git Push",
    "workflow_git_push_success": "Git Push completed successfully.",
    "workflow_git_push_failed_warning": "Task '{}' completed with warnings: Git Push failed.",
    "workflow_no_commits_skip_push": "No new commits to push. Skipping Git Push.",
    "workflow_final_pull": "Performing final Git Pull (post-push sync)",
    "workflow_final_pull_success": "Final Git Pull completed successfully.",
    "workflow_final_pull_failed_warning": "Task '{}' completed with warnings: Final Git Pull failed.",
    "workflow_task_completed_success": "Task '{}' completed successfully!",

    # Git Logic Messages
    "git_executing_command": "Executing Git command: {} in '{}'",
    "git_stdout": "Git STDOUT:\n{}",
    "git_stderr": "Git STDERR:\n{}",
    "git_command_failed": "Git command FAILED with exit code {}.",
    "git_error_not_found": "Error: 'git' command not found. Please ensure Git is installed and in your PATH.",
    "git_error_unexpected": "An unexpected error occurred while running Git command: {}",
    "git_pulling_updates": "Pulling updates for branch '{}'...",
    "git_pull_failed": "Git Pull failed for branch '{}'.",
    "git_pull_successful": "Git Pull successful.",
    "git_checking_status": "Checking for pending changes using 'git status --porcelain'...",
    "git_error_status_check": "Error during Git status check.",
    "git_changes_detected": "Changes detected.",
    "git_no_changes_detected": "No changes detected.",
    "git_staging_changes": "Staging changes ('{}')...",
    "git_add_failed": "Git Add failed.",
    "git_committing_changes": "Committing changes with message: '{}'...",
    "git_commit_failed": "Git Commit failed.",
    "git_add_commit_successful": "Git Add and Commit successful.",
    "git_pushing_changes": "Pushing changes to '{}/{}'...",
    "git_push_failed": "Git Push failed to '{}/{}'.",
    "git_push_successful": "Git Push successful.",
    "git_repo_already_exists": "Git repository already exists at '{}'. Skipping initialization.",
    "git_initializing_repo": "Initializing new Git repository at '{}'...",
    "git_created_dir_for_repo": "Created directory for repository: '{}'",
    "git_error_creating_dir": "Error creating repository directory '{}': {}",
    "git_init_failed": "Git repository initialization failed at '{}'.",
    "git_init_successful": "Git repository initialized successfully at '{}'.",
    "git_adding_remote_origin": "Adding remote origin '{}'...",
    "git_add_remote_failed": "Failed to add remote origin '{}'.",
    "git_add_remote_successful": "Remote origin '{}' added successfully.",
    "git_checkout_or_create_branch_step": "Checking out or creating branch '{}'...",
    "git_fetching_remote": "Fetching from remote '{}' to update branch list...",
    "git_fetch_failed_warning": "Failed to fetch from remote '{}'. This might affect branch detection.",
    "git_branch_found_remote": "Branch '{}' found on remote '{}'.",
    "git_branch_not_found_remote": "Branch '{}' not found on remote '{}'.",
    "git_branch_found_local": "Branch '{}' found locally.",
    "git_branch_not_found_local": "Branch '{}' not found locally.",
    "git_attempting_checkout_existing": "Attempting to checkout existing branch '{}'...",
    "git_checkout_failed": "Failed to checkout branch '{}'.",
    "git_checkout_successful": "Successfully checked out branch '{}'.",
    "git_warning_set_upstream_failed": "Warning: Failed to set upstream for '{}' to '{}/{}'.",
    "git_creating_new_branch": "Creating new local branch '{}'...",
    "git_create_branch_failed": "Failed to create new branch '{}'.",
    "git_create_checkout_successful": "Successfully created and checked out new branch '{}'.",
    "git_pushing_new_branch": "Pushing new branch '{}' to '{}' to set upstream...",
    "git_push_new_branch_failed_warning": "Failed to push new branch '{}' to '{}'.",
    "git_branch_op_completed": "Branch operation for '{}' completed.",

    # Command Logic Messages
    "command_executing": "Executing command: {}",
    "command_stdout": "Command STDOUT:\n{}",
    "command_failed_exit_code": "Command FAILED with exit code {}.",
    "command_stderr": "Command STDERR:\n{}",
    "command_error_not_found": "Error: Command '{}' not found.",
    "command_unexpected_error": "An unexpected error occurred during command execution: {}",
    "command_warning_cwd_not_exist": "Warning: Specified command working directory '{}' does not exist.",
    "command_error_cwd_not_exist": "Error: Command working directory '{}' does not exist.",
    "command_no_command_specified": "No command specified to execute.",
    "command_execution_successful": "Command executed successfully.",

    # CLI Parser Messages (for usage examples and errors)
    "cli_description": "Automate Git-centric workflows or create new config files.",
    "cli_task_identifier_help": "The name of the task (e.g., 'my_backup') which resolves to 'config_dir/my_backup.json', OR a direct path to a config file (e.g., 'path/to/my_config.json').",
    "cli_create_help": "Create a new JSON configuration file with the given task name.",
    "cli_edit_help": "Open the identified JSON configuration file in the default text editor. Requires a 'task_identifier' or '--json' path.",
    "cli_list_help": "List all configured tasks found in the config directory, showing their name, branch, and local repository location.",
    "cli_json_help": "Explicitly specify the full path to the JSON configuration file to load/edit. This overrides the positional 'task_identifier' if it was a task name.",
    "cli_config_dir_help": "Base directory for looking up config files when only a task name is provided (e.g., 'my_task' resolves to 'PATH/my_task.json'). Defaults to '{}'.",
    "cli_output_help": "Specify the output filepath for the new configuration file (used with --create). Defaults to TASK_NAME.json in the default config directory.",
    "cli_branch_help": "Overrides the 'branch' specified in the config file for this run or pre-fills it during creation.",
    "cli_origin_help": "Overrides the 'origin' specified in the config file for this run or pre-fills it during creation.",
    "cli_folder_help": "Overrides the 'git_repo_path' specified in the config file for this run or pre-fills it during creation. This should be the absolute path to your local Git repository.",
    "cli_verbose_help": "Enable verbose output for detailed logging of operations.",
    "cli_overwrite_help": "When creating a configuration file, overwrite it if it already exists.",
    "cli_initialize_help": "Initialize the Git repository if it does not exist at the specified 'git_repo_path'.",
    "cli_error_no_task_or_json": "No task identifier or --json path provided to run a task.",
    "cli_usage_examples": "Usage Examples:",
    "cli_example_run_by_name": "  Run by task name (e.g., 'my_daily_backup' in default config dir):",
    "cli_example_run_by_name_config_dir": "  Run by task name in a specific config directory:",
    "cli_example_run_by_json_path": "  Run by explicit JSON file path:",
    "cli_example_run_by_json_path_positional": "  Run by explicit JSON file path (positional):",
    "cli_example_create_new_config": "  Create a new config (defaults to user home config dir):",
    "cli_example_create_overwrite": "  Create a new config and overwrite if exists:",
    "cli_example_initialize_run": "  Initialize a new Git repo and run a task:",
    "cli_example_edit_config": "  Edit an existing config file:",
    "cli_example_list_tasks": "  List all configured tasks:",
    "cli_error_edit_no_args": "Error: No task identifier or --json path provided for editing.",
    "cli_edit_usage_hint": "Usage: python main.py my_task --edit OR python main.py --json /path/to/my_config.json --edit",
    "cli_error_config_file_not_found": "Error: Configuration file '{}' not found.",
    "cli_listing_tasks_in": "Listing all configured tasks in '{}':",
    "cli_no_config_files_found": "No configuration files found in '{}'.",
    "cli_warning_malformed_json": "  Warning: Skipping malformed JSON file: {}",
    "cli_warning_missing_key": "  Warning: Skipping '{}'. Missing expected key: {}",
    "cli_warning_unexpected_error_reading_file": "  Warning: An unexpected error occurred reading '{}': {}",
    "cli_no_valid_configs_found": "No valid configuration files found in '{}'.",
    "cli_error_invalid_json_format": "Error: Invalid JSON format in '{}': {}.",
    "cli_error_unexpected_reading_config": "An unexpected error occurred while reading '{}': {}.",
    "cli_error_json_not_object": "Error: JSON file '{}' must contain a single JSON object (not a list or other type).",
    "cli_attempting_open_editor": "Attempting to open '{}' in default editor...",
    "cli_editor_launched_success": "Successfully launched editor for '{}'.",
    "cli_error_editor_not_found": "Error: Default editor command not found. Ensure '{}' is in your PATH.",
    "cli_error_opening_file_editor": "Error opening file with default editor: {}",
    "cli_error_unexpected_opening_file": "An unexpected error occurred while trying to open the file: {}",

    # Config Operations Messages
    "config_start_creation": "Starting configuration file creation for task: '{}'",
    "config_target_output_path": "Target output path: '{}'",
    "config_appended_json_extension": "Appended '.json' extension to output path: '{}'",
    "config_file_exists_error": "Error: Configuration file '{}' already exists. Use --overwrite to force creation.",
    "config_file_exists_warning_overwrite": "Warning: Configuration file '{}' already exists. Overwriting as --overwrite was specified.",
    "config_parent_dir_not_exist": "Parent directory '{}' does not exist. Attempting to create...",
    "config_dir_created_success": "Successfully created directory: '{}'",
    "config_error_creating_dir": "Error creating directory '{}': {}",
    "config_output_to_cwd": "Output file will be created in the current working directory: '{}'",
    "config_parent_dir_exists": "Parent directory '{}' already exists.",
    "config_creation_success": "Successfully created configuration file: '{}'",
    "config_edit_hint": "\nPlease edit this file with your specific paths and commands.",
    "config_creation_failed": "Error creating configuration file '{}': {}",
    "config_finished_creation": "Finished configuration file creation for task: '{}'",
}
