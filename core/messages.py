# core/messages.py

MESSAGES = {
    # General CLI Messages
    "cli_description": "A Git automation script to manage repositories and workflows.",
    "cli_task_identifier_help": "Name of the task/repository configuration (e.g., 'my_backup_repo') or a direct path to a JSON config file (e.g., './configs/my_repo.json').",
    "cli_create_help": "Creates a new JSON configuration file for a task.",
    "cli_json_help": "Specify a JSON configuration file to use.",
    "cli_edit_help": "Opens the specified task's JSON configuration file in the default text editor.",
    "cli_config_dir_help_env": "Specify the base directory for configuration files. Defaults to {}. Can also be set via GIT_AUTOMATION_CONFIG_DIR environment variable.",
    "cli_output_help": "Specify the output file path for 'create' command. Defaults to the config directory.",
    "cli_branch_override_help": "Override the branch specified in the config file for this run.",
    "cli_origin_override_help": "Override the remote origin URL for this run.",
    "cli_folder_help": "Override the repository folder path for this run.",
    "cli_verbose_help": "Enable verbose output for detailed debugging.",
    "cli_overwrite_help": "Overwrite an existing configuration file when creating a new one.",
    "cli_initialize_help": "Initialize the Git repository if it doesn't exist. Will add origin if provided.",
    "cli_list_help": "List all available task configuration files.",
    "cli_update_help": "Perform a streamlined update workflow: stash local changes, pull, pop stash, commit, push, final pull.",

    # CLI Error Messages
    "cli_error_mutually_exclusive_commands": "❌ Error: Commands --create, --edit, --list, and --update are mutually exclusive. Please use only one.",
    "cli_error_no_task_or_json": "❌ Error: No task identifier or --json path provided for execution.",
    "cli_error_config_file_not_found": "❌ Error: Configuration file not found at '{}'.",
    "cli_error_invalid_json_format": "❌ Error: Invalid JSON format in '{}'. Details: {}",
    "cli_error_json_not_object": "❌ Error: JSON content in '{}' is not a dictionary (object).",
    "cli_error_unexpected_reading_config": "❌ Error: Unexpected error reading config file '{}'. Details: {}",
    "cli_error_edit_no_args": "❌ Error: Missing task identifier or --json path for --edit command.",
    "cli_error_update_no_task": "❌ Error: The --update command requires a task identifier or --json path to specify which repository to update.",
    "cli_error_editor_not_found": "❌ Error: Default editor not found or not configured for '{}'.",
    "cli_error_opening_file_editor": "❌ Error: Failed to open file in editor. Details: {}",
    "cli_error_unexpected_opening_file": "❌ Error: An unexpected error occurred trying to open the file. Details: {}",

    # CLI Usage Hints / Info
    "cli_usage_examples": "Usage Examples:",
    "cli_example_run_by_name": "Run a task by its name (looks in default config dir):",
    "cli_example_run_by_name_config_dir": "Run a task from a custom config directory:",
    "cli_example_run_by_json_path": "Run a task using a direct JSON file path:",
    "cli_example_run_by_json_path_positional": "Run a task using a positional JSON file path:",
    "cli_example_create_new_config": "Create a new config file:",
    "cli_example_create_overwrite": "Create and overwrite an existing config:",
    "cli_example_initialize_run": "Initialize a new repository and run a task:",
    "cli_example_edit_config": "Edit a task's config file:",
    "cli_example_list_tasks": "List all configured tasks:",
    "cli_example_update_task": "Perform an update workflow for a task:",
    "cli_edit_usage_hint": "Usage: python main.py <task_name> --edit OR python main.py --json <path_to_json> --edit",
    "cli_attempting_open_editor": "Attempting to open '{}' in your default editor...",
    "cli_editor_launched_success": "✅ Editor launched successfully for '{}'.",
    "cli_listing_tasks_in": "Listing tasks in: {}",
    "cli_no_config_files_found": "No .json configuration files found in '{}'.",
    "cli_no_valid_configs_found": "No valid task configurations found in '{}'.",
    "cli_warning_malformed_json": "⚠️ Warning: File '{}' is not valid JSON. Skipping.",
    "cli_warning_missing_key": "⚠️ Warning: Task '{}' in '{}' is missing a required key: {}. Skipping.",
    "cli_warning_unexpected_error_reading_file": "⚠️ Warning: Unexpected error reading file '{}': {}. Skipping.",

    # Information Source Indicators
    "info_cli_from_arg": "from CLI argument",
    "info_cli_from_config": "from config",
    "info_cli_from_config_default": "from config (default: {})", # Note: expects a default value if used

    # Config Handling
    "config_file_exists_overwrite": "Config file '{}' already exists. Overwriting as --overwrite was specified.",
    "config_file_exists_no_overwrite": "Config file '{}' already exists. Use --overwrite to replace it.",
    "config_creation_prompt_repo_path": "Enter Git repository path (e.g., /home/user/my_repo): ",
    "config_creation_prompt_branch": "Enter Git branch (default: main): ",
    "config_creation_prompt_origin": "Enter Git remote origin URL (e.g., https://github.com/user/repo.git): ",
    "config_creation_prompt_command": "Enter pre-commit command (optional, e.g., 'npm run build'): ",
    "config_creation_prompt_commit_msg": "Enter Git commit message (default: Automated update for {}): ",
    "config_default_config_path_created": "Default configuration directory created: '{}'.",
    "config_error_creating_default_config_path": "❌ Error creating default configuration directory '{}': {}",
    "config_file_created_success": "✅ Configuration file for task '{}' created at '{}'.",
    "config_file_creation_failed": "❌ Failed to create configuration file for task '{}': {}",


    # Workflow Messages (used in workflow_logic.py)
    "workflow_start_task": "Starting automated task from '{}'",
    "workflow_start_update_task": "Starting update workflow for task '{}'",
    "workflow_task_details": "Task: {}",
    "workflow_git_repo_path": "  Repository Path: {} ({})",
    "workflow_branch": "  Branch: {} ({})",
    "workflow_origin": "  Origin: {} ({})",
    "workflow_pre_commit_command": "  Pre-commit Command: '{}'",
    "workflow_no_pre_commit_command": "  No pre-commit command specified.",
    "workflow_commit_message": "  Commit Message: '{}'",
    "workflow_error_missing_repo_path": "❌ Error: Repository path is not defined for task '{}'.",
    "workflow_task_aborted_missing_info": "❌ Task '{}' aborted due to missing information.",
    "workflow_repo_not_found_init_attempt": "Repository not found at '{}'. Attempting to initialize...",
    "workflow_repo_init_failed": "❌ Repository initialization failed for task '{}'.",
    "workflow_repo_init_success": "✅ Repository initialized successfully.",
    "workflow_error_repo_not_valid": "❌ Error: Git repository not found at '{}' for task '{}'.",
    "workflow_error_repo_not_valid_update": "❌ Error: Git repository not found or not valid at '{}' for task '{}'.",
    "workflow_hint_use_initialize": "Hint: Use --initialize flag to automatically initialize a new repository.",
    "workflow_task_aborted_repo_setup": "❌ Task '{}' aborted due to repository setup issues.",
    "workflow_repo_found": "Repository found at '{}'.",
    "workflow_initial_pull": "Performing initial Git Pull",
    "workflow_initial_pull_success": "✅ Initial Git Pull completed successfully.",
    "workflow_initial_pull_failed": "❌ Initial Git Pull failed for task '{}'. Aborting.",
    "workflow_pre_commit_pull": "Performing pull before checking for changes...",
    "workflow_pre_commit_pull_failed": "❌ Pre-commit pull failed for task '{}'.",
    "workflow_pre_commit_pull_success": "✅ Pre-commit pull completed successfully.",
    "workflow_update_aborted_pull_failed": "❌ Update for task '{}' aborted due to pull failure.",
    "workflow_executing_command_line": "Executing pre-commit command...",
    "workflow_command_execution_success": "✅ Command execution completed successfully.", # This is the one used in workflow_logic.py
    "workflow_command_execution_failed": "❌ Command execution failed for task '{}'. Aborting.",
    "workflow_no_command_line": "No pre-commit command to execute.",
    "workflow_checking_for_changes": "Checking for changes in Git Repository",
    "workflow_error_diff_check_failed": "❌ Error checking for changes for task '{}'. Aborting.",
    "workflow_changes_detected_add_commit": "Changes detected. Staging and committing...",
    "workflow_git_add_commit_success": "✅ Changes staged and committed successfully.",
    "workflow_git_add_commit_failed": "❌ Failed to stage and commit changes for task '{}'. Aborting.",
    "workflow_no_changes_skip_commit": "No changes detected. Skipping commit and push.",
    "workflow_commits_made_push": "Commits made. Pushing changes...",
    "workflow_git_push_success": "✅ Git Push completed successfully.",
    "workflow_git_push_failed_warning": "❌ Git Push failed for task '{}'. Check remote and try again.",
    "workflow_no_commits_skip_push": "No commits made. Skipping push.",
    "workflow_final_pull": "Performing final Git Pull (post-push sync)",
    "workflow_final_pull_success": "✅ Final Git Pull completed successfully.",
    "workflow_final_pull_failed_warning": "❌ Final Git Pull failed for task '{}'. Local repo might be out of sync.",
    "workflow_task_completed_success": "✅ Task '{}' completed successfully!",

    # Git Operations (messages used in git_logic.py)
    "git_executing_command": "Executing Git command: 'git {}' in '{}'",
    "git_stdout": "Git stdout: {}",
    "git_stderr": "Git stderr: {}",
    "git_command_failed": "❌ Git command failed with exit code {}.",
    "git_error_not_found": "❌ Error: Git command not found. Please ensure Git is installed and in your PATH.",
    "git_error_unexpected": "❌ Git unexpected error: {}",
    "git_repo_already_exists": "Repository already exists at '{}'. Skipping initialization.",
    "git_initializing_repo": "Initializing Git repository in '{}'...",
    "git_created_dir_for_repo": "Created directory '{}' for repository.",
    "git_error_creating_dir": "❌ Error creating directory '{}': {}",
    "git_init_failed": "❌ Git init failed in '{}'.",
    "git_init_successful": "✅ Repository initialized at '{}'.",
    "git_adding_remote_origin": "Adding remote origin '{}'...",
    "git_add_remote_failed": "❌ Failed to add remote origin '{}'.",
    "git_add_remote_successful": "✅ Remote origin '{}' added successfully.",
    "git_checkout_or_create_branch_step": "Attempting to checkout or create branch '{}'...",
    "git_branch_found_local": "Branch '{}' found locally.",
    "git_attempting_checkout_existing": "Attempting to checkout existing branch '{}'...",
    "git_checkout_failed": "❌ Failed to checkout branch '{}'.",
    "git_checkout_successful": "✅ Checked out branch '{}'.",
    "git_branch_not_found_local": "Branch '{}' not found locally.",
    "git_fetching_remote": "Fetching from remote '{}'...",
    "git_fetch_failed_warning": "⚠️ Warning: Git fetch from '{}' failed: {}. Continuing...",
    "git_branch_found_remote": "Branch '{}' found on remote '{}'.",
    "git_branch_not_found_remote": "Branch '{}' not found on remote '{}'.",
    "git_creating_new_branch": "Creating new branch '{}'...",
    "git_create_branch_failed": "❌ Failed to create new branch '{}'.",
    "git_create_checkout_successful": "✅ Created and checked out new branch '{}'.",
    "git_pushing_new_branch": "Pushing new branch '{}' to '{}' as '{}'...",
    "git_push_new_branch_failed_warning": "⚠️ Warning: Failed to push new branch '{}' to '{}' as '{}'. You may need to push manually.",
    "git_branch_op_completed": "Branch operation for '{}' completed.",
    "git_pulling_updates": "Pulling updates for branch '{}'...",
    "git_pull_failed": "❌ Git pull failed for branch '{}'.",
    "git_pull_successful": "✅ Git pull completed successfully.",
    "git_checking_status": "Checking Git status...",
    "git_error_status_check": "❌ Error performing git status check.",
    "git_no_changes_detected": "No changes detected.",
    "git_changes_detected": "Changes detected.",
    "git_staging_changes": "Staging changes ({})",
    "git_add_failed": "❌ Git add failed.",
    "git_committing_changes": "Committing changes with message: '{}'",
    "git_commit_failed": "❌ Git commit failed.",
    "git_add_commit_successful": "✅ Changes staged and committed.",
    "git_pushing_changes": "Pushing changes to {}/{}...",
    "git_push_failed": "❌ Git push failed to {}/{}.",
    "git_push_successful": "✅ Git push completed successfully.",

    # Git Stash Messages
    "git_checking_local_changes_for_stash": "Checking for local changes before pull...",
    "git_changes_found_stashing": "Local changes detected. Stashing them temporarily...",
    "git_no_changes_to_stash": "No local changes detected. Skipping stash.",
    "git_stash_successful": "✅ Changes stashed successfully.",
    "git_stash_failed": "❌ Git stash failed. Please resolve manually: {}",
    "git_stash_pop_applying": "Applying stashed changes...",
    "git_stash_pop_successful": "✅ Stashed changes applied successfully.",
    "git_stash_pop_failed_conflict": "❌ Failed to apply stashed changes due to conflicts. Please resolve manually.",
    "git_stash_pop_failed_general": "❌ Failed to apply stashed changes. Please resolve manually: {}",
    "git_stash_pop_no_stash": "No stashed changes to apply.",

    # Command Logic Messages (used in command_logic.py)
    "command_executing": "Executing command: '{}'",
    "command_stdout": "Command stdout: {}",
    "command_stderr": "Command stderr: {}",
    "command_success": "✅ Command completed successfully.", # This is the primary one used by command_logic
    "command_execution_successful": "✅ Command execution successful.", # Included for robustness, if an older workflow_logic.py or similar uses it
    "command_failed": "❌ Command failed with exit code {}.",
    "command_error_not_found": "❌ Error: Command '{}' not found.",
    "command_unexpected_error": "❌ Command unexpected error: {}",

    # Logger Messages (used in logger.py)
    "log_level_debug": "DEBUG",
    "log_level_info": "INFO",
    "log_level_normal": "", # No prefix for normal messages
    "log_level_step": "STEP",
    "log_level_success": "SUCCESS",
    "log_level_warning": "WARNING",
    "log_level_error": "ERROR",
}