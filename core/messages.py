import os

MESSAGES = {
    # General
    "script_starting": "üöÄ Starting automated task from '{}'",
    "script_completed_success": "‚úÖ Task '{}' completed successfully!",
    "script_completed_with_errors": "‚ùå Task '{}' completed with errors.",
    "script_aborted": "üö´ Script aborted.",
    "task_details_header": "Task Details: {}",
    "task_detail_repo_path": "  Git Repo Path: '{}' (from {})",
    "task_detail_branch": "  Branch: '{}' (from {})",
    "task_detail_origin": "  Origin: '{}' (from {})",
    "task_detail_command_line": "  Pre-commit Command: '{}'",
    "task_detail_commit_message": "  Git Commit Message: '{}'",

    # Configuration Operations
    "config_creating_new_file": "üìù Creating new configuration file: '{}'",
    "config_file_exists_overwrite": "‚ö†Ô∏è Configuration file '{}' already exists. Use --overwrite to force creation.",
    "config_created_success": "‚úÖ Configuration file '{}' created successfully.",
    "config_creation_failed": "‚ùå Failed to create configuration file '{}': {}",
    "config_default_config_path_created": "üìÅ Default config directory created: '{}'",
    "config_error_creating_default_config_path": "‚ùå Error creating default config directory '{}': {}",
    "config_invalid_json_format": "‚ùå Invalid JSON format in '{}': {}",
    "config_file_loaded": "Configuration loaded from '{}'",
    "config_name_from_filepath": "Setting task name to '{}' from file path.",
    "config_validation_error": "‚ùå Configuration validation error: {}",
    "config_validation_missing_key": "‚ùå Missing required key '{}' in configuration.",
    "config_validation_invalid_path": "‚ùå Invalid path for '{}': '{}'",
    "config_resolved_path": "Resolved config directory to: '{}'",
    "config_file_not_found_in_dir": "Config file '{}' not found in '{}'",
    "config_loaded_from_json_arg": "Loading config from direct JSON path: '{}'",

    # Git Operations
    "git_repo_found": "Git repository found at '{}'.",
    "git_repo_not_found_initializing": "Git repository not found at '{}'. Initializing...",
    "git_init_success": "Git repository initialized successfully at '{}'.",
    "git_init_failed": "‚ùå Failed to initialize Git repository at '{}': {}",
    "git_remote_add_success": "Remote '{}' added successfully for '{}'.",
    "git_remote_add_failed": "‚ùå Failed to add remote '{}' for '{}': {}",
    "git_pull_start": "Performing initial Git Pull",
    "git_pull_in_progress": "Pulling updates for branch '{}'...",
    "git_pull_success": "Initial Git Pull completed successfully.",
    "git_pull_failed": "‚ùå Initial Git Pull failed: {}",
    "git_status_check": "Checking for changes in Git Repository",
    "git_no_changes": "No changes detected. Skipping Git Add and Commit.",
    "git_changes_detected": "Changes detected. Staging and Committing...",
    "git_add_success": "Git Add completed successfully.",
    "git_add_failed": "‚ùå Git Add failed: {}",
    "git_commit_success": "Git Commit completed successfully. Commit message: '{}'",
    "git_commit_failed": "‚ùå Git Commit failed: {}",
    "git_push_start": "Pushing changes to remote...",
    "git_push_success": "Git Push completed successfully.",
    "git_push_failed": "‚ùå Git Push failed: {}",
    "git_final_pull_start": "Performing final Git Pull (post-push sync)",
    "git_final_pull_success": "Final Git Pull completed successfully.",
    "git_final_pull_failed": "‚ùå Final Git Pull failed: {}",
    "git_checkout_create_branch_start": "Checking out or creating branch '{}'...",
    "git_branch_exists_local": "Branch '{}' found locally.",
    "git_branch_exists_remote": "Branch '{}' found on remote '{}'.",
    "git_checkout_success": "Successfully checked out branch '{}'.",
    "git_checkout_failed": "‚ùå Failed to checkout branch '{}': {}",
    "git_create_branch_success": "Successfully created new branch '{}'.",
    "git_create_branch_failed": "‚ùå Failed to create branch '{}': {}",
    "git_set_upstream_success": "Set upstream for branch '{}' to '{}'.",
    "git_set_upstream_failed": "‚ùå Failed to set upstream for branch '{}': {}",
    "git_branch_operation_completed": "Branch operation for '{}' completed.",
    "git_fetch_remote_start": "Fetching from remote '{}' to update branch list...",
    "git_fetch_remote_failed": "‚ùå Failed to fetch from remote '{}': {}",

    # Command Execution
    "command_execute_start": "Executing command_line",
    "command_execute_success": "Command execution completed successfully.",
    "command_execute_failed": "‚ùå Command execution failed: {}",
    "command_execution_skipped": "No command_line specified. Skipping pre-commit command execution.",

    # CLI Parser Help Messages
    "cli_description": "Automate common Git operations for your projects.",
    "cli_task_identifier_help": "Name of the task config file (e.g., 'my_task' for my_task.json) or a direct path to a .json config file.",
    "cli_create_help": "Create a new JSON configuration file with the specified task name.",
    "cli_json_help": "Explicitly specify the full path to a JSON configuration file.",
    "cli_edit_help": "Open the identified JSON configuration file in your default text editor.",
    # UPDATED MESSAGE:
    "cli_config_dir_help_env": "Base directory for looking up config files when only a task name is provided. Defaults to '{}'. This can also be overridden by setting the 'GIT_AUTOMATION_CONFIG_DIR' environment variable.",
    "cli_output_help": "Specify the output filepath for the new configuration file (used with --create).",
    "cli_branch_override_help": "Override the 'branch' specified in the config, or pre-fill it during creation.",
    "cli_origin_override_help": "Override the 'origin' specified in the config, or pre-fill it during creation.",
    "cli_folder_help": "Override the 'git_repo_path' specified in the config, or pre-fill it during creation. This should be the absolute path to your local Git repository.",
    "cli_verbose_help": "Enable verbose output for detailed logging.",
    "cli_overwrite_help": "When creating a configuration file, overwrite it if it already exists.",
    "cli_initialize_help": "Initialize the Git repository if it does not exist at the specified git_repo_path.",
    "cli_list_help": "List all configured tasks found in the config directory.",

    # CLI Validation/Error Messages
    "cli_error_edit_no_args": "Error: Missing task identifier or --json path for --edit command.",
    "cli_edit_usage_hint": "Usage: python main.py <task_name> --edit OR python main.py --json <path_to_json> --edit",
    "cli_error_config_file_not_found": "‚ùå Error: Configuration file not found at '{}'.",
    "cli_error_editor_not_found": "‚ùå Error: Default editor command '{}' not found. Please ensure a default editor is configured for .json files and its command is in your system's PATH.",
    "cli_error_opening_file_editor": "‚ùå Error opening file in editor: {}",
    "cli_error_unexpected_opening_file": "‚ùå An unexpected error occurred while trying to open the file: {}",
    "cli_attempting_open_editor": "Attempting to open '{}' in default editor...",
    "cli_editor_launched_success": "‚úÖ Editor launched for '{}'.",
    "cli_listing_tasks_in": "Listing all configured tasks in '{}':",
    "cli_no_config_files_found": "No config files found in '{}'.",
    "cli_warning_malformed_json": "‚ö†Ô∏è Warning: Skipping '{}' due to malformed JSON.",
    "cli_warning_missing_key": "‚ö†Ô∏è Warning: Skipping '{}' due to missing key: '{}'.",
    "cli_warning_unexpected_error_reading_file": "‚ö†Ô∏è Warning: Unexpected error reading file '{}': {}",
    "cli_no_valid_configs_found": "No valid configuration files found in '{}'.",
    "cli_error_no_task_or_json": "‚ùå Error: No task identifier, --json path, or specific action (--create, --edit, --list) provided.",
    "cli_usage_examples": "Usage Examples:",
    "cli_example_run_by_name": "Run a task by name (e.g., 'my_daily_backup' in default config dir):",
    "cli_example_run_by_name_config_dir": "Run a task by name in a specific config directory:",
    "cli_example_run_by_json_path": "Run a task by explicit JSON file path:",
    "cli_example_run_by_json_path_positional": "Run a task by explicit JSON file path (positional):",
    "cli_example_create_new_config": "Create a new config (defaults to system config dir):",
    "cli_example_create_overwrite": "Create a new config and overwrite if it exists:",
    "cli_example_initialize_run": "Initialize a new Git repo and run a task:",
    "cli_example_edit_config": "Edit an existing config file:",
    "cli_example_list_tasks": "List all configured tasks:",
    "cli_error_invalid_json_format": "‚ùå Error: The file '{}' contains invalid JSON format: {}",
    "cli_error_unexpected_reading_config": "‚ùå Error: An unexpected error occurred while reading the config file '{}': {}",
    "cli_error_json_not_object": "‚ùå Error: The JSON content in '{}' is not a valid object (expected {{...}})."
}